Rules useless in parser due to conflicts

   11 param: param

   33 $@17: /* empty */

   57 $@29: /* empty */

  120 args: args


State 26 conflicts: 2 shift/reduce
State 41 conflicts: 1 reduce/reduce
State 47 conflicts: 1 reduce/reduce
State 56 conflicts: 8 reduce/reduce
State 59 conflicts: 1 shift/reduce, 2 reduce/reduce
State 145 conflicts: 2 shift/reduce
State 164 conflicts: 1 shift/reduce, 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: functionList mainFunction

    2 functionList: functionList function
    3             | /* empty */

    4 $@1: /* empty */

    5 function: type ID $@1 paramList compoundStmt

    6 $@2: /* empty */

    7 $@3: /* empty */

    8 paramList: O_BRACK $@2 param C_BRACK $@3

    9 $@4: /* empty */

   10 param: param COMMA $@4 param
   11      | param

   12 $@5: /* empty */

   13 param: type ID $@5
   14      | /* empty */

   15 $@6: /* empty */

   16 $@7: /* empty */

   17 $@8: /* empty */

   18 $@9: /* empty */

   19 mainFunction: INT $@6 MAIN $@7 O_BRACK $@8 C_BRACK $@9 compoundStmt

   20 $@10: /* empty */

   21 type: INT $@10

   22 $@11: /* empty */

   23 type: FLOAT $@11

   24 $@12: /* empty */

   25 type: VOID $@12

   26 $@13: /* empty */

   27 $@14: /* empty */

   28 compoundStmt: OC_BRACK $@13 localDeclaration statementList CC_BRACK $@14

   29 $@15: /* empty */

   30 localDeclaration: varDeclaration COMMA $@15 localDeclaration

   31 $@16: /* empty */

   32 localDeclaration: varDeclaration S_COLON $@16 localDeclaration

   33 $@17: /* empty */

   34 localDeclaration: varDeclaration S_COLON $@17
   35                 | /* empty */

   36 $@18: /* empty */

   37 $@19: /* empty */

   38 varDeclaration: type ID $@18 ASSIGN $@19 expression

   39 statementList: statement statementList
   40              | statement

   41 statement: expression
   42          | if_stmt
   43          | if_stmt if_else
   44          | if_stmt else_if if_else

   45 $@20: /* empty */

   46 statement: WHILE $@20 condition compoundStmt

   47 $@21: /* empty */

   48 $@22: /* empty */

   49 statement: RETURN $@21 expression S_COLON $@22

   50 $@23: /* empty */

   51 $@24: /* empty */

   52 $@25: /* empty */

   53 $@26: /* empty */

   54 $@27: /* empty */

   55 $@28: /* empty */

   56 statement: PRINTF $@23 O_BRACK $@24 STRING $@25 COMMA $@26 expression C_BRACK $@27 S_COLON $@28

   57 $@29: /* empty */

   58 $@30: /* empty */

   59 $@31: /* empty */

   60 $@32: /* empty */

   61 $@33: /* empty */

   62 statement: PRINTF $@29 O_BRACK $@30 STRING $@31 C_BRACK $@32 S_COLON $@33

   63 $@34: /* empty */

   64 if_stmt: IF $@34 condition compoundStmt

   65 $@35: /* empty */

   66 if_else: ELSE $@35 compoundStmt

   67 $@36: /* empty */

   68 $@37: /* empty */

   69 else_if: ELSE $@36 IF $@37 condition compoundStmt

   70 $@38: /* empty */

   71 $@39: /* empty */

   72 condition: O_BRACK $@38 expression C_BRACK $@39

   73 expression: additiveExpression relop expression
   74           | additiveExpression

   75 additiveExpression: additiveExpression addop term
   76                   | term

   77 $@40: /* empty */

   78 relop: LE $@40

   79 $@41: /* empty */

   80 relop: GE $@41

   81 $@42: /* empty */

   82 relop: EQ $@42

   83 $@43: /* empty */

   84 relop: NE $@43

   85 $@44: /* empty */

   86 relop: GT $@44

   87 $@45: /* empty */

   88 relop: LT $@45

   89 $@46: /* empty */

   90 relop: AND $@46

   91 $@47: /* empty */

   92 relop: OR $@47

   93 $@48: /* empty */

   94 relop: NOT $@48

   95 term: term mulop factor
   96     | factor

   97 $@49: /* empty */

   98 addop: ADD $@49

   99 $@50: /* empty */

  100 addop: SUBTRACT $@50

  101 $@51: /* empty */

  102 mulop: MULTIPLY $@51

  103 $@52: /* empty */

  104 mulop: DIVIDE $@52

  105 $@53: /* empty */

  106 $@54: /* empty */

  107 factor: O_BRACK $@53 expression C_BRACK $@54

  108 $@55: /* empty */

  109 $@56: /* empty */

  110 $@57: /* empty */

  111 factor: ID $@55 O_BRACK $@56 args C_BRACK $@57

  112 $@58: /* empty */

  113 factor: ID $@58

  114 $@59: /* empty */

  115 factor: NUMBER $@59

  116 $@60: /* empty */

  117 factor: FLOAT_NUM $@60

  118 $@61: /* empty */

  119 args: args COMMA $@61 args
  120     | args

  121 $@62: /* empty */

  122 args: ID $@62

  123 $@63: /* empty */

  124 args: NUMBER $@63
  125     | /* empty */


Terminals, with rules where they appear

$end (0) 0
error (256)
PRINTF (258) 56 62
VOID (259) 25
IF (260) 64 69
ELSE (261) 66 69
INT (262) 19 21
WHILE (263) 46
FLOAT (264) 23
RETURN (265) 49
NUMBER (266) 115 124
MAIN (267) 19
FLOAT_NUM (268) 117
ID (269) 5 13 38 111 113 122
STRING (270) 56 62
LE (271) 78
ASSIGN (272) 38
GE (273) 80
EQ (274) 82
NE (275) 84
GT (276) 86
LT (277) 88
AND (278) 90
OR (279) 92
NOT (280) 94
ADD (281) 98
SUBTRACT (282) 100
DIVIDE (283) 104
MULTIPLY (284) 102
O_BRACK (285) 8 19 56 62 72 107 111
C_BRACK (286) 8 19 56 62 72 107 111
OC_BRACK (287) 28
CC_BRACK (288) 28
S_COLON (289) 32 34 49 56 62
COMMA (290) 10 30 56 119


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
program (37)
    on left: 1, on right: 0
functionList (38)
    on left: 2 3, on right: 1 2
function (39)
    on left: 5, on right: 2
$@1 (40)
    on left: 4, on right: 5
paramList (41)
    on left: 8, on right: 5
$@2 (42)
    on left: 6, on right: 8
$@3 (43)
    on left: 7, on right: 8
param (44)
    on left: 10 11 13 14, on right: 8 10 11
$@4 (45)
    on left: 9, on right: 10
$@5 (46)
    on left: 12, on right: 13
mainFunction (47)
    on left: 19, on right: 1
$@6 (48)
    on left: 15, on right: 19
$@7 (49)
    on left: 16, on right: 19
$@8 (50)
    on left: 17, on right: 19
$@9 (51)
    on left: 18, on right: 19
type (52)
    on left: 21 23 25, on right: 5 13 38
$@10 (53)
    on left: 20, on right: 21
$@11 (54)
    on left: 22, on right: 23
$@12 (55)
    on left: 24, on right: 25
compoundStmt (56)
    on left: 28, on right: 5 19 46 64 66 69
$@13 (57)
    on left: 26, on right: 28
$@14 (58)
    on left: 27, on right: 28
localDeclaration (59)
    on left: 30 32 34 35, on right: 28 30 32
$@15 (60)
    on left: 29, on right: 30
$@16 (61)
    on left: 31, on right: 32
$@17 (62)
    on left: 33, on right: 34
varDeclaration (63)
    on left: 38, on right: 30 32 34
$@18 (64)
    on left: 36, on right: 38
$@19 (65)
    on left: 37, on right: 38
statementList (66)
    on left: 39 40, on right: 28 39
statement (67)
    on left: 41 42 43 44 46 49 56 62, on right: 39 40
$@20 (68)
    on left: 45, on right: 46
$@21 (69)
    on left: 47, on right: 49
$@22 (70)
    on left: 48, on right: 49
$@23 (71)
    on left: 50, on right: 56
$@24 (72)
    on left: 51, on right: 56
$@25 (73)
    on left: 52, on right: 56
$@26 (74)
    on left: 53, on right: 56
$@27 (75)
    on left: 54, on right: 56
$@28 (76)
    on left: 55, on right: 56
$@29 (77)
    on left: 57, on right: 62
$@30 (78)
    on left: 58, on right: 62
$@31 (79)
    on left: 59, on right: 62
$@32 (80)
    on left: 60, on right: 62
$@33 (81)
    on left: 61, on right: 62
if_stmt (82)
    on left: 64, on right: 42 43 44
$@34 (83)
    on left: 63, on right: 64
if_else (84)
    on left: 66, on right: 43 44
$@35 (85)
    on left: 65, on right: 66
else_if (86)
    on left: 69, on right: 44
$@36 (87)
    on left: 67, on right: 69
$@37 (88)
    on left: 68, on right: 69
condition (89)
    on left: 72, on right: 46 64 69
$@38 (90)
    on left: 70, on right: 72
$@39 (91)
    on left: 71, on right: 72
expression (92)
    on left: 73 74, on right: 38 41 49 56 72 73 107
additiveExpression (93)
    on left: 75 76, on right: 73 74 75
relop (94)
    on left: 78 80 82 84 86 88 90 92 94, on right: 73
$@40 (95)
    on left: 77, on right: 78
$@41 (96)
    on left: 79, on right: 80
$@42 (97)
    on left: 81, on right: 82
$@43 (98)
    on left: 83, on right: 84
$@44 (99)
    on left: 85, on right: 86
$@45 (100)
    on left: 87, on right: 88
$@46 (101)
    on left: 89, on right: 90
$@47 (102)
    on left: 91, on right: 92
$@48 (103)
    on left: 93, on right: 94
term (104)
    on left: 95 96, on right: 75 76 95
addop (105)
    on left: 98 100, on right: 75
$@49 (106)
    on left: 97, on right: 98
$@50 (107)
    on left: 99, on right: 100
mulop (108)
    on left: 102 104, on right: 95
$@51 (109)
    on left: 101, on right: 102
$@52 (110)
    on left: 103, on right: 104
factor (111)
    on left: 107 111 113 115 117, on right: 95 96
$@53 (112)
    on left: 105, on right: 107
$@54 (113)
    on left: 106, on right: 107
$@55 (114)
    on left: 108, on right: 111
$@56 (115)
    on left: 109, on right: 111
$@57 (116)
    on left: 110, on right: 111
$@58 (117)
    on left: 112, on right: 113
$@59 (118)
    on left: 114, on right: 115
$@60 (119)
    on left: 116, on right: 117
args (120)
    on left: 119 120 122 124 125, on right: 111 119 120
$@61 (121)
    on left: 118, on right: 119
$@62 (122)
    on left: 121, on right: 122
$@63 (123)
    on left: 123, on right: 124


state 0

    0 $accept: . program $end

    $default  reduce using rule 3 (functionList)

    program       go to state 1
    functionList  go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: functionList . mainFunction
    2 functionList: functionList . function

    VOID   shift, and go to state 4
    INT    shift, and go to state 5
    FLOAT  shift, and go to state 6

    function      go to state 7
    mainFunction  go to state 8
    type          go to state 9


state 3

    0 $accept: program $end .

    $default  accept


state 4

   25 type: VOID . $@12

    $default  reduce using rule 24 ($@12)

    $@12  go to state 10


state 5

   19 mainFunction: INT . $@6 MAIN $@7 O_BRACK $@8 C_BRACK $@9 compoundStmt
   21 type: INT . $@10

    ID        reduce using rule 20 ($@10)
    $default  reduce using rule 15 ($@6)

    $@6   go to state 11
    $@10  go to state 12


state 6

   23 type: FLOAT . $@11

    $default  reduce using rule 22 ($@11)

    $@11  go to state 13


state 7

    2 functionList: functionList function .

    $default  reduce using rule 2 (functionList)


state 8

    1 program: functionList mainFunction .

    $default  reduce using rule 1 (program)


state 9

    5 function: type . ID $@1 paramList compoundStmt

    ID  shift, and go to state 14


state 10

   25 type: VOID $@12 .

    $default  reduce using rule 25 (type)


state 11

   19 mainFunction: INT $@6 . MAIN $@7 O_BRACK $@8 C_BRACK $@9 compoundStmt

    MAIN  shift, and go to state 15


state 12

   21 type: INT $@10 .

    $default  reduce using rule 21 (type)


state 13

   23 type: FLOAT $@11 .

    $default  reduce using rule 23 (type)


state 14

    5 function: type ID . $@1 paramList compoundStmt

    $default  reduce using rule 4 ($@1)

    $@1  go to state 16


state 15

   19 mainFunction: INT $@6 MAIN . $@7 O_BRACK $@8 C_BRACK $@9 compoundStmt

    $default  reduce using rule 16 ($@7)

    $@7  go to state 17


state 16

    5 function: type ID $@1 . paramList compoundStmt

    O_BRACK  shift, and go to state 18

    paramList  go to state 19


state 17

   19 mainFunction: INT $@6 MAIN $@7 . O_BRACK $@8 C_BRACK $@9 compoundStmt

    O_BRACK  shift, and go to state 20


state 18

    8 paramList: O_BRACK . $@2 param C_BRACK $@3

    $default  reduce using rule 6 ($@2)

    $@2  go to state 21


state 19

    5 function: type ID $@1 paramList . compoundStmt

    OC_BRACK  shift, and go to state 22

    compoundStmt  go to state 23


state 20

   19 mainFunction: INT $@6 MAIN $@7 O_BRACK . $@8 C_BRACK $@9 compoundStmt

    $default  reduce using rule 17 ($@8)

    $@8  go to state 24


state 21

    8 paramList: O_BRACK $@2 . param C_BRACK $@3

    VOID   shift, and go to state 4
    INT    shift, and go to state 25
    FLOAT  shift, and go to state 6

    $default  reduce using rule 14 (param)

    param  go to state 26
    type   go to state 27


state 22

   28 compoundStmt: OC_BRACK . $@13 localDeclaration statementList CC_BRACK $@14

    $default  reduce using rule 26 ($@13)

    $@13  go to state 28


state 23

    5 function: type ID $@1 paramList compoundStmt .

    $default  reduce using rule 5 (function)


state 24

   19 mainFunction: INT $@6 MAIN $@7 O_BRACK $@8 . C_BRACK $@9 compoundStmt

    C_BRACK  shift, and go to state 29


state 25

   21 type: INT . $@10

    $default  reduce using rule 20 ($@10)

    $@10  go to state 12


state 26

    8 paramList: O_BRACK $@2 param . C_BRACK $@3
   10 param: param . COMMA $@4 param
   11      | param .

    C_BRACK  shift, and go to state 30
    COMMA    shift, and go to state 31

    C_BRACK  [reduce using rule 11 (param)]
    COMMA    [reduce using rule 11 (param)]


state 27

   13 param: type . ID $@5

    ID  shift, and go to state 32


state 28

   28 compoundStmt: OC_BRACK $@13 . localDeclaration statementList CC_BRACK $@14

    VOID   shift, and go to state 4
    INT    shift, and go to state 25
    FLOAT  shift, and go to state 6

    $default  reduce using rule 35 (localDeclaration)

    type              go to state 33
    localDeclaration  go to state 34
    varDeclaration    go to state 35


state 29

   19 mainFunction: INT $@6 MAIN $@7 O_BRACK $@8 C_BRACK . $@9 compoundStmt

    $default  reduce using rule 18 ($@9)

    $@9  go to state 36


state 30

    8 paramList: O_BRACK $@2 param C_BRACK . $@3

    $default  reduce using rule 7 ($@3)

    $@3  go to state 37


state 31

   10 param: param COMMA . $@4 param

    $default  reduce using rule 9 ($@4)

    $@4  go to state 38


state 32

   13 param: type ID . $@5

    $default  reduce using rule 12 ($@5)

    $@5  go to state 39


state 33

   38 varDeclaration: type . ID $@18 ASSIGN $@19 expression

    ID  shift, and go to state 40


state 34

   28 compoundStmt: OC_BRACK $@13 localDeclaration . statementList CC_BRACK $@14

    PRINTF     shift, and go to state 41
    IF         shift, and go to state 42
    WHILE      shift, and go to state 43
    RETURN     shift, and go to state 44
    NUMBER     shift, and go to state 45
    FLOAT_NUM  shift, and go to state 46
    ID         shift, and go to state 47
    O_BRACK    shift, and go to state 48

    statementList       go to state 49
    statement           go to state 50
    if_stmt             go to state 51
    expression          go to state 52
    additiveExpression  go to state 53
    term                go to state 54
    factor              go to state 55


state 35

   30 localDeclaration: varDeclaration . COMMA $@15 localDeclaration
   32                 | varDeclaration . S_COLON $@16 localDeclaration
   34                 | varDeclaration . S_COLON $@17

    S_COLON  shift, and go to state 56
    COMMA    shift, and go to state 57


state 36

   19 mainFunction: INT $@6 MAIN $@7 O_BRACK $@8 C_BRACK $@9 . compoundStmt

    OC_BRACK  shift, and go to state 22

    compoundStmt  go to state 58


state 37

    8 paramList: O_BRACK $@2 param C_BRACK $@3 .

    $default  reduce using rule 8 (paramList)


state 38

   10 param: param COMMA $@4 . param

    VOID   shift, and go to state 4
    INT    shift, and go to state 25
    FLOAT  shift, and go to state 6

    $default  reduce using rule 14 (param)

    param  go to state 59
    type   go to state 27


state 39

   13 param: type ID $@5 .

    $default  reduce using rule 13 (param)


state 40

   38 varDeclaration: type ID . $@18 ASSIGN $@19 expression

    $default  reduce using rule 36 ($@18)

    $@18  go to state 60


state 41

   56 statement: PRINTF . $@23 O_BRACK $@24 STRING $@25 COMMA $@26 expression C_BRACK $@27 S_COLON $@28
   62          | PRINTF . $@29 O_BRACK $@30 STRING $@31 C_BRACK $@32 S_COLON $@33

    O_BRACK   reduce using rule 50 ($@23)
    O_BRACK   [reduce using rule 57 ($@29)]
    $default  reduce using rule 50 ($@23)

    $@23  go to state 61
    $@29  go to state 62


state 42

   64 if_stmt: IF . $@34 condition compoundStmt

    $default  reduce using rule 63 ($@34)

    $@34  go to state 63


state 43

   46 statement: WHILE . $@20 condition compoundStmt

    $default  reduce using rule 45 ($@20)

    $@20  go to state 64


state 44

   49 statement: RETURN . $@21 expression S_COLON $@22

    $default  reduce using rule 47 ($@21)

    $@21  go to state 65


state 45

  115 factor: NUMBER . $@59

    $default  reduce using rule 114 ($@59)

    $@59  go to state 66


state 46

  117 factor: FLOAT_NUM . $@60

    $default  reduce using rule 116 ($@60)

    $@60  go to state 67


state 47

  111 factor: ID . $@55 O_BRACK $@56 args C_BRACK $@57
  113       | ID . $@58

    O_BRACK   reduce using rule 108 ($@55)
    O_BRACK   [reduce using rule 112 ($@58)]
    $default  reduce using rule 112 ($@58)

    $@55  go to state 68
    $@58  go to state 69


state 48

  107 factor: O_BRACK . $@53 expression C_BRACK $@54

    $default  reduce using rule 105 ($@53)

    $@53  go to state 70


state 49

   28 compoundStmt: OC_BRACK $@13 localDeclaration statementList . CC_BRACK $@14

    CC_BRACK  shift, and go to state 71


state 50

   39 statementList: statement . statementList
   40              | statement .

    PRINTF     shift, and go to state 41
    IF         shift, and go to state 42
    WHILE      shift, and go to state 43
    RETURN     shift, and go to state 44
    NUMBER     shift, and go to state 45
    FLOAT_NUM  shift, and go to state 46
    ID         shift, and go to state 47
    O_BRACK    shift, and go to state 48

    $default  reduce using rule 40 (statementList)

    statementList       go to state 72
    statement           go to state 50
    if_stmt             go to state 51
    expression          go to state 52
    additiveExpression  go to state 53
    term                go to state 54
    factor              go to state 55


state 51

   42 statement: if_stmt .
   43          | if_stmt . if_else
   44          | if_stmt . else_if if_else

    ELSE  shift, and go to state 73

    $default  reduce using rule 42 (statement)

    if_else  go to state 74
    else_if  go to state 75


state 52

   41 statement: expression .

    $default  reduce using rule 41 (statement)


state 53

   73 expression: additiveExpression . relop expression
   74           | additiveExpression .
   75 additiveExpression: additiveExpression . addop term

    LE        shift, and go to state 76
    GE        shift, and go to state 77
    EQ        shift, and go to state 78
    NE        shift, and go to state 79
    GT        shift, and go to state 80
    LT        shift, and go to state 81
    AND       shift, and go to state 82
    OR        shift, and go to state 83
    NOT       shift, and go to state 84
    ADD       shift, and go to state 85
    SUBTRACT  shift, and go to state 86

    $default  reduce using rule 74 (expression)

    relop  go to state 87
    addop  go to state 88


state 54

   76 additiveExpression: term .
   95 term: term . mulop factor

    DIVIDE    shift, and go to state 89
    MULTIPLY  shift, and go to state 90

    $default  reduce using rule 76 (additiveExpression)

    mulop  go to state 91


state 55

   96 term: factor .

    $default  reduce using rule 96 (term)


state 56

   32 localDeclaration: varDeclaration S_COLON . $@16 localDeclaration
   34                 | varDeclaration S_COLON . $@17

    PRINTF     reduce using rule 31 ($@16)
    PRINTF     [reduce using rule 33 ($@17)]
    IF         reduce using rule 31 ($@16)
    IF         [reduce using rule 33 ($@17)]
    WHILE      reduce using rule 31 ($@16)
    WHILE      [reduce using rule 33 ($@17)]
    RETURN     reduce using rule 31 ($@16)
    RETURN     [reduce using rule 33 ($@17)]
    NUMBER     reduce using rule 31 ($@16)
    NUMBER     [reduce using rule 33 ($@17)]
    FLOAT_NUM  reduce using rule 31 ($@16)
    FLOAT_NUM  [reduce using rule 33 ($@17)]
    ID         reduce using rule 31 ($@16)
    ID         [reduce using rule 33 ($@17)]
    O_BRACK    reduce using rule 31 ($@16)
    O_BRACK    [reduce using rule 33 ($@17)]
    $default   reduce using rule 31 ($@16)

    $@16  go to state 92
    $@17  go to state 93


state 57

   30 localDeclaration: varDeclaration COMMA . $@15 localDeclaration

    $default  reduce using rule 29 ($@15)

    $@15  go to state 94


state 58

   19 mainFunction: INT $@6 MAIN $@7 O_BRACK $@8 C_BRACK $@9 compoundStmt .

    $default  reduce using rule 19 (mainFunction)


state 59

   10 param: param . COMMA $@4 param
   10      | param COMMA $@4 param .
   11      | param .

    COMMA  shift, and go to state 31

    C_BRACK   reduce using rule 10 (param)
    C_BRACK   [reduce using rule 11 (param)]
    COMMA     [reduce using rule 10 (param)]
    COMMA     [reduce using rule 11 (param)]
    $default  reduce using rule 10 (param)


state 60

   38 varDeclaration: type ID $@18 . ASSIGN $@19 expression

    ASSIGN  shift, and go to state 95


state 61

   56 statement: PRINTF $@23 . O_BRACK $@24 STRING $@25 COMMA $@26 expression C_BRACK $@27 S_COLON $@28

    O_BRACK  shift, and go to state 96


state 62

   62 statement: PRINTF $@29 . O_BRACK $@30 STRING $@31 C_BRACK $@32 S_COLON $@33

    O_BRACK  shift, and go to state 97


state 63

   64 if_stmt: IF $@34 . condition compoundStmt

    O_BRACK  shift, and go to state 98

    condition  go to state 99


state 64

   46 statement: WHILE $@20 . condition compoundStmt

    O_BRACK  shift, and go to state 98

    condition  go to state 100


state 65

   49 statement: RETURN $@21 . expression S_COLON $@22

    NUMBER     shift, and go to state 45
    FLOAT_NUM  shift, and go to state 46
    ID         shift, and go to state 47
    O_BRACK    shift, and go to state 48

    expression          go to state 101
    additiveExpression  go to state 53
    term                go to state 54
    factor              go to state 55


state 66

  115 factor: NUMBER $@59 .

    $default  reduce using rule 115 (factor)


state 67

  117 factor: FLOAT_NUM $@60 .

    $default  reduce using rule 117 (factor)


state 68

  111 factor: ID $@55 . O_BRACK $@56 args C_BRACK $@57

    O_BRACK  shift, and go to state 102


state 69

  113 factor: ID $@58 .

    $default  reduce using rule 113 (factor)


state 70

  107 factor: O_BRACK $@53 . expression C_BRACK $@54

    NUMBER     shift, and go to state 45
    FLOAT_NUM  shift, and go to state 46
    ID         shift, and go to state 47
    O_BRACK    shift, and go to state 48

    expression          go to state 103
    additiveExpression  go to state 53
    term                go to state 54
    factor              go to state 55


state 71

   28 compoundStmt: OC_BRACK $@13 localDeclaration statementList CC_BRACK . $@14

    $default  reduce using rule 27 ($@14)

    $@14  go to state 104


state 72

   39 statementList: statement statementList .

    $default  reduce using rule 39 (statementList)


state 73

   66 if_else: ELSE . $@35 compoundStmt
   69 else_if: ELSE . $@36 IF $@37 condition compoundStmt

    IF        reduce using rule 67 ($@36)
    $default  reduce using rule 65 ($@35)

    $@35  go to state 105
    $@36  go to state 106


state 74

   43 statement: if_stmt if_else .

    $default  reduce using rule 43 (statement)


state 75

   44 statement: if_stmt else_if . if_else

    ELSE  shift, and go to state 107

    if_else  go to state 108


state 76

   78 relop: LE . $@40

    $default  reduce using rule 77 ($@40)

    $@40  go to state 109


state 77

   80 relop: GE . $@41

    $default  reduce using rule 79 ($@41)

    $@41  go to state 110


state 78

   82 relop: EQ . $@42

    $default  reduce using rule 81 ($@42)

    $@42  go to state 111


state 79

   84 relop: NE . $@43

    $default  reduce using rule 83 ($@43)

    $@43  go to state 112


state 80

   86 relop: GT . $@44

    $default  reduce using rule 85 ($@44)

    $@44  go to state 113


state 81

   88 relop: LT . $@45

    $default  reduce using rule 87 ($@45)

    $@45  go to state 114


state 82

   90 relop: AND . $@46

    $default  reduce using rule 89 ($@46)

    $@46  go to state 115


state 83

   92 relop: OR . $@47

    $default  reduce using rule 91 ($@47)

    $@47  go to state 116


state 84

   94 relop: NOT . $@48

    $default  reduce using rule 93 ($@48)

    $@48  go to state 117


state 85

   98 addop: ADD . $@49

    $default  reduce using rule 97 ($@49)

    $@49  go to state 118


state 86

  100 addop: SUBTRACT . $@50

    $default  reduce using rule 99 ($@50)

    $@50  go to state 119


state 87

   73 expression: additiveExpression relop . expression

    NUMBER     shift, and go to state 45
    FLOAT_NUM  shift, and go to state 46
    ID         shift, and go to state 47
    O_BRACK    shift, and go to state 48

    expression          go to state 120
    additiveExpression  go to state 53
    term                go to state 54
    factor              go to state 55


state 88

   75 additiveExpression: additiveExpression addop . term

    NUMBER     shift, and go to state 45
    FLOAT_NUM  shift, and go to state 46
    ID         shift, and go to state 47
    O_BRACK    shift, and go to state 48

    term    go to state 121
    factor  go to state 55


state 89

  104 mulop: DIVIDE . $@52

    $default  reduce using rule 103 ($@52)

    $@52  go to state 122


state 90

  102 mulop: MULTIPLY . $@51

    $default  reduce using rule 101 ($@51)

    $@51  go to state 123


state 91

   95 term: term mulop . factor

    NUMBER     shift, and go to state 45
    FLOAT_NUM  shift, and go to state 46
    ID         shift, and go to state 47
    O_BRACK    shift, and go to state 48

    factor  go to state 124


state 92

   32 localDeclaration: varDeclaration S_COLON $@16 . localDeclaration

    VOID   shift, and go to state 4
    INT    shift, and go to state 25
    FLOAT  shift, and go to state 6

    $default  reduce using rule 35 (localDeclaration)

    type              go to state 33
    localDeclaration  go to state 125
    varDeclaration    go to state 35


state 93

   34 localDeclaration: varDeclaration S_COLON $@17 .

    $default  reduce using rule 34 (localDeclaration)


state 94

   30 localDeclaration: varDeclaration COMMA $@15 . localDeclaration

    VOID   shift, and go to state 4
    INT    shift, and go to state 25
    FLOAT  shift, and go to state 6

    $default  reduce using rule 35 (localDeclaration)

    type              go to state 33
    localDeclaration  go to state 126
    varDeclaration    go to state 35


state 95

   38 varDeclaration: type ID $@18 ASSIGN . $@19 expression

    $default  reduce using rule 37 ($@19)

    $@19  go to state 127


state 96

   56 statement: PRINTF $@23 O_BRACK . $@24 STRING $@25 COMMA $@26 expression C_BRACK $@27 S_COLON $@28

    $default  reduce using rule 51 ($@24)

    $@24  go to state 128


state 97

   62 statement: PRINTF $@29 O_BRACK . $@30 STRING $@31 C_BRACK $@32 S_COLON $@33

    $default  reduce using rule 58 ($@30)

    $@30  go to state 129


state 98

   72 condition: O_BRACK . $@38 expression C_BRACK $@39

    $default  reduce using rule 70 ($@38)

    $@38  go to state 130


state 99

   64 if_stmt: IF $@34 condition . compoundStmt

    OC_BRACK  shift, and go to state 22

    compoundStmt  go to state 131


state 100

   46 statement: WHILE $@20 condition . compoundStmt

    OC_BRACK  shift, and go to state 22

    compoundStmt  go to state 132


state 101

   49 statement: RETURN $@21 expression . S_COLON $@22

    S_COLON  shift, and go to state 133


state 102

  111 factor: ID $@55 O_BRACK . $@56 args C_BRACK $@57

    $default  reduce using rule 109 ($@56)

    $@56  go to state 134


state 103

  107 factor: O_BRACK $@53 expression . C_BRACK $@54

    C_BRACK  shift, and go to state 135


state 104

   28 compoundStmt: OC_BRACK $@13 localDeclaration statementList CC_BRACK $@14 .

    $default  reduce using rule 28 (compoundStmt)


state 105

   66 if_else: ELSE $@35 . compoundStmt

    OC_BRACK  shift, and go to state 22

    compoundStmt  go to state 136


state 106

   69 else_if: ELSE $@36 . IF $@37 condition compoundStmt

    IF  shift, and go to state 137


state 107

   66 if_else: ELSE . $@35 compoundStmt

    $default  reduce using rule 65 ($@35)

    $@35  go to state 105


state 108

   44 statement: if_stmt else_if if_else .

    $default  reduce using rule 44 (statement)


state 109

   78 relop: LE $@40 .

    $default  reduce using rule 78 (relop)


state 110

   80 relop: GE $@41 .

    $default  reduce using rule 80 (relop)


state 111

   82 relop: EQ $@42 .

    $default  reduce using rule 82 (relop)


state 112

   84 relop: NE $@43 .

    $default  reduce using rule 84 (relop)


state 113

   86 relop: GT $@44 .

    $default  reduce using rule 86 (relop)


state 114

   88 relop: LT $@45 .

    $default  reduce using rule 88 (relop)


state 115

   90 relop: AND $@46 .

    $default  reduce using rule 90 (relop)


state 116

   92 relop: OR $@47 .

    $default  reduce using rule 92 (relop)


state 117

   94 relop: NOT $@48 .

    $default  reduce using rule 94 (relop)


state 118

   98 addop: ADD $@49 .

    $default  reduce using rule 98 (addop)


state 119

  100 addop: SUBTRACT $@50 .

    $default  reduce using rule 100 (addop)


state 120

   73 expression: additiveExpression relop expression .

    $default  reduce using rule 73 (expression)


state 121

   75 additiveExpression: additiveExpression addop term .
   95 term: term . mulop factor

    DIVIDE    shift, and go to state 89
    MULTIPLY  shift, and go to state 90

    $default  reduce using rule 75 (additiveExpression)

    mulop  go to state 91


state 122

  104 mulop: DIVIDE $@52 .

    $default  reduce using rule 104 (mulop)


state 123

  102 mulop: MULTIPLY $@51 .

    $default  reduce using rule 102 (mulop)


state 124

   95 term: term mulop factor .

    $default  reduce using rule 95 (term)


state 125

   32 localDeclaration: varDeclaration S_COLON $@16 localDeclaration .

    $default  reduce using rule 32 (localDeclaration)


state 126

   30 localDeclaration: varDeclaration COMMA $@15 localDeclaration .

    $default  reduce using rule 30 (localDeclaration)


state 127

   38 varDeclaration: type ID $@18 ASSIGN $@19 . expression

    NUMBER     shift, and go to state 45
    FLOAT_NUM  shift, and go to state 46
    ID         shift, and go to state 47
    O_BRACK    shift, and go to state 48

    expression          go to state 138
    additiveExpression  go to state 53
    term                go to state 54
    factor              go to state 55


state 128

   56 statement: PRINTF $@23 O_BRACK $@24 . STRING $@25 COMMA $@26 expression C_BRACK $@27 S_COLON $@28

    STRING  shift, and go to state 139


state 129

   62 statement: PRINTF $@29 O_BRACK $@30 . STRING $@31 C_BRACK $@32 S_COLON $@33

    STRING  shift, and go to state 140


state 130

   72 condition: O_BRACK $@38 . expression C_BRACK $@39

    NUMBER     shift, and go to state 45
    FLOAT_NUM  shift, and go to state 46
    ID         shift, and go to state 47
    O_BRACK    shift, and go to state 48

    expression          go to state 141
    additiveExpression  go to state 53
    term                go to state 54
    factor              go to state 55


state 131

   64 if_stmt: IF $@34 condition compoundStmt .

    $default  reduce using rule 64 (if_stmt)


state 132

   46 statement: WHILE $@20 condition compoundStmt .

    $default  reduce using rule 46 (statement)


state 133

   49 statement: RETURN $@21 expression S_COLON . $@22

    $default  reduce using rule 48 ($@22)

    $@22  go to state 142


state 134

  111 factor: ID $@55 O_BRACK $@56 . args C_BRACK $@57

    NUMBER  shift, and go to state 143
    ID      shift, and go to state 144

    $default  reduce using rule 125 (args)

    args  go to state 145


state 135

  107 factor: O_BRACK $@53 expression C_BRACK . $@54

    $default  reduce using rule 106 ($@54)

    $@54  go to state 146


state 136

   66 if_else: ELSE $@35 compoundStmt .

    $default  reduce using rule 66 (if_else)


state 137

   69 else_if: ELSE $@36 IF . $@37 condition compoundStmt

    $default  reduce using rule 68 ($@37)

    $@37  go to state 147


state 138

   38 varDeclaration: type ID $@18 ASSIGN $@19 expression .

    $default  reduce using rule 38 (varDeclaration)


state 139

   56 statement: PRINTF $@23 O_BRACK $@24 STRING . $@25 COMMA $@26 expression C_BRACK $@27 S_COLON $@28

    $default  reduce using rule 52 ($@25)

    $@25  go to state 148


state 140

   62 statement: PRINTF $@29 O_BRACK $@30 STRING . $@31 C_BRACK $@32 S_COLON $@33

    $default  reduce using rule 59 ($@31)

    $@31  go to state 149


state 141

   72 condition: O_BRACK $@38 expression . C_BRACK $@39

    C_BRACK  shift, and go to state 150


state 142

   49 statement: RETURN $@21 expression S_COLON $@22 .

    $default  reduce using rule 49 (statement)


state 143

  124 args: NUMBER . $@63

    $default  reduce using rule 123 ($@63)

    $@63  go to state 151


state 144

  122 args: ID . $@62

    $default  reduce using rule 121 ($@62)

    $@62  go to state 152


state 145

  111 factor: ID $@55 O_BRACK $@56 args . C_BRACK $@57
  119 args: args . COMMA $@61 args
  120     | args .

    C_BRACK  shift, and go to state 153
    COMMA    shift, and go to state 154

    C_BRACK  [reduce using rule 120 (args)]
    COMMA    [reduce using rule 120 (args)]


state 146

  107 factor: O_BRACK $@53 expression C_BRACK $@54 .

    $default  reduce using rule 107 (factor)


state 147

   69 else_if: ELSE $@36 IF $@37 . condition compoundStmt

    O_BRACK  shift, and go to state 98

    condition  go to state 155


state 148

   56 statement: PRINTF $@23 O_BRACK $@24 STRING $@25 . COMMA $@26 expression C_BRACK $@27 S_COLON $@28

    COMMA  shift, and go to state 156


state 149

   62 statement: PRINTF $@29 O_BRACK $@30 STRING $@31 . C_BRACK $@32 S_COLON $@33

    C_BRACK  shift, and go to state 157


state 150

   72 condition: O_BRACK $@38 expression C_BRACK . $@39

    $default  reduce using rule 71 ($@39)

    $@39  go to state 158


state 151

  124 args: NUMBER $@63 .

    $default  reduce using rule 124 (args)


state 152

  122 args: ID $@62 .

    $default  reduce using rule 122 (args)


state 153

  111 factor: ID $@55 O_BRACK $@56 args C_BRACK . $@57

    $default  reduce using rule 110 ($@57)

    $@57  go to state 159


state 154

  119 args: args COMMA . $@61 args

    $default  reduce using rule 118 ($@61)

    $@61  go to state 160


state 155

   69 else_if: ELSE $@36 IF $@37 condition . compoundStmt

    OC_BRACK  shift, and go to state 22

    compoundStmt  go to state 161


state 156

   56 statement: PRINTF $@23 O_BRACK $@24 STRING $@25 COMMA . $@26 expression C_BRACK $@27 S_COLON $@28

    $default  reduce using rule 53 ($@26)

    $@26  go to state 162


state 157

   62 statement: PRINTF $@29 O_BRACK $@30 STRING $@31 C_BRACK . $@32 S_COLON $@33

    $default  reduce using rule 60 ($@32)

    $@32  go to state 163


state 158

   72 condition: O_BRACK $@38 expression C_BRACK $@39 .

    $default  reduce using rule 72 (condition)


state 159

  111 factor: ID $@55 O_BRACK $@56 args C_BRACK $@57 .

    $default  reduce using rule 111 (factor)


state 160

  119 args: args COMMA $@61 . args

    NUMBER  shift, and go to state 143
    ID      shift, and go to state 144

    $default  reduce using rule 125 (args)

    args  go to state 164


state 161

   69 else_if: ELSE $@36 IF $@37 condition compoundStmt .

    $default  reduce using rule 69 (else_if)


state 162

   56 statement: PRINTF $@23 O_BRACK $@24 STRING $@25 COMMA $@26 . expression C_BRACK $@27 S_COLON $@28

    NUMBER     shift, and go to state 45
    FLOAT_NUM  shift, and go to state 46
    ID         shift, and go to state 47
    O_BRACK    shift, and go to state 48

    expression          go to state 165
    additiveExpression  go to state 53
    term                go to state 54
    factor              go to state 55


state 163

   62 statement: PRINTF $@29 O_BRACK $@30 STRING $@31 C_BRACK $@32 . S_COLON $@33

    S_COLON  shift, and go to state 166


state 164

  119 args: args . COMMA $@61 args
  119     | args COMMA $@61 args .
  120     | args .

    COMMA  shift, and go to state 154

    C_BRACK   reduce using rule 119 (args)
    C_BRACK   [reduce using rule 120 (args)]
    COMMA     [reduce using rule 119 (args)]
    COMMA     [reduce using rule 120 (args)]
    $default  reduce using rule 119 (args)


state 165

   56 statement: PRINTF $@23 O_BRACK $@24 STRING $@25 COMMA $@26 expression . C_BRACK $@27 S_COLON $@28

    C_BRACK  shift, and go to state 167


state 166

   62 statement: PRINTF $@29 O_BRACK $@30 STRING $@31 C_BRACK $@32 S_COLON . $@33

    $default  reduce using rule 61 ($@33)

    $@33  go to state 168


state 167

   56 statement: PRINTF $@23 O_BRACK $@24 STRING $@25 COMMA $@26 expression C_BRACK . $@27 S_COLON $@28

    $default  reduce using rule 54 ($@27)

    $@27  go to state 169


state 168

   62 statement: PRINTF $@29 O_BRACK $@30 STRING $@31 C_BRACK $@32 S_COLON $@33 .

    $default  reduce using rule 62 (statement)


state 169

   56 statement: PRINTF $@23 O_BRACK $@24 STRING $@25 COMMA $@26 expression C_BRACK $@27 . S_COLON $@28

    S_COLON  shift, and go to state 170


state 170

   56 statement: PRINTF $@23 O_BRACK $@24 STRING $@25 COMMA $@26 expression C_BRACK $@27 S_COLON . $@28

    $default  reduce using rule 55 ($@28)

    $@28  go to state 171


state 171

   56 statement: PRINTF $@23 O_BRACK $@24 STRING $@25 COMMA $@26 expression C_BRACK $@27 S_COLON $@28 .

    $default  reduce using rule 56 (statement)
